#!/usr/bin/env escript
%% -*- erlang -*-

main(Args) ->
    % default config
    DefConfig = [{cover, "all.coverdata"},
              {output, "coverage.xml"},
              {sources, "src/"}],
    Config = scan_args(Args, DefConfig),

    CoverData = proplists:get_value(cover, Config),
    io:format("Importing '~s' data file...~n", [CoverData]),
    cover:import(CoverData),
    io:format("Found ~w modules.~n", [length(cover:imported_modules())]),

    Output = proplists:get_value(output, Config),


    generate_report(Output),
    io:format("Done.~n"),
    ok.

usage() ->
    ScriptName = escript:script_name(),
    io:format("Usage: ~s [-cover CoverDataFile] [-output CoberturaXML] [-src SourcesDir]~n", [ScriptName]),
    ok.

generate_report(Output) ->
    io:format("Generating report...~n"),
    Prolog = ["<?xml version=\"1.0\" encoding=\"utf-8\"?>\n",
              "<!DOCTYPE coverage SYSTEM \"http://cobertura.sourceforge.net/xml/coverage-04.dtd\">\n"],

    {MegaSecs, Secs, MicroSecs} = now(),
    Timestamp = MegaSecs * 1000000000 + Secs * 1000 + (MicroSecs div 1000), % in milliseconds

    Root = {coverage, [{timestamp, Timestamp}], []},
    Report = xmerl:export_simple([Root], xmerl_xml, [{prolog, Prolog}]),
    write_output(Report, Output),
    ok.

write_output(Report, Output) ->
    io:format("Writing output report '~s'...~n", [Output]),
    case file:open(Output, [write, {encoding, utf8}]) of
        {ok, Fd} ->
            ok = file:write(Fd, [Report, "\n"]),
            file:close(Fd);
        {error, Reason} ->
            io:format("Could not open '~s' due to ~p.~n", [Output, Reason]),
            halt(1)
    end,
    ok.

% Parse arguments into tuple list
scan_args([], Args) -> Args;
scan_args([[$- | Name] | Args], Config) ->
    NameAtom = list_to_atom(Name),
    {Value, Args2} =
        case has_arg(NameAtom) of
            true when length(Args) > 0 ->
                {hd(Args), tl(Args)};
            true -> usage(), halt(1);
            false -> {true, Args}
        end,
    Config2 = lists:keystore(NameAtom, 1, Config, {NameAtom, Value}),
    scan_args(Args2, Config2);
scan_args(_Args, _Config) ->
    usage(),
    halt(1).

has_arg(cover) -> true;
has_arg(output) -> true;
has_arg(src) -> true;
has_arg(_Other) -> false.
