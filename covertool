#!/usr/bin/env escript
%% -*- erlang -*-

-include_lib("xmerl/include/xmerl.hrl").

-type metric() :: {Covered:: non_neg_integer(), Total :: non_neg_integer()}.
-record(result, {line = {0, 0} :: Metric,
                 branches = {0, 0} :: Metric,
                 data = [] :: term()}).

main(Args) ->
    % we put all arguments process dictionary for simplicity
    % default config
    put(cover, "all.coverdata"),
    put(output, "coverage.xml"),
    put(sources, "src/"),
    scan_args(Args),

    CoverData = get(cover),
    io:format("Importing '~s' data file...~n", [CoverData]),
    cover:import(CoverData),
    io:format("Found ~w modules.~n", [length(cover:imported_modules())]),

    Output = get(output),
    generate_report(Output),
    io:format("Done.~n"),
    ok.

usage() ->
    ScriptName = escript:script_name(),
    io:format("Usage: ~s [-cover CoverDataFile] [-output CoberturaXML] [-src SourcesDir]~n", [ScriptName]),
    ok.

generate_report(Output) ->
    io:format("Generating report...~n"),
    Prolog = ["<?xml version=\"1.0\" encoding=\"utf-8\"?>\n",
              "<!DOCTYPE coverage SYSTEM \"http://cobertura.sourceforge.net/xml/coverage-04.dtd\">\n"],

    {MegaSecs, Secs, MicroSecs} = now(),
    Timestamp = MegaSecs * 1000000000 + Secs * 1000 + (MicroSecs div 1000), % in milliseconds

    Version = "1.9.4.1", % emulate Cobertura 1.9.4.1
    Complexity = 0,

    Result = generate_packages(),
    {LinesCovered, LinesValid} = Result#result.line,
    LineRate = rate(Result#result.line),

    {BranchesCovered, BranchesValid} = Result#result.branches,
    BranchRate = rate(Result#result.branches),

    Sources = filename:absname(get(src)),
    Root = {coverage, [{timestamp, Timestamp},
                       {'line-rate', LineRate},
                       {'lines-covered', LinesCovered},
                       {'lines-valid', LinesValid},
                       {'branch-rate', BranchRate},
                       {'branches-covered', BranchesCovered},
                       {'branches-valid', BranchesValid},
                       {complexity, Complexity},
                       {version, Version}],
            [{sources, [{source, [Sources]}]},
             {packages, [Result#result.data]}]},
    Report = xmerl:export_simple([Root], xmerl_xml, [{prolog, Prolog}]),
    write_output(Report, Output),
    ok.

generate_packages() ->
    Classes = generate_classes(),
    % for now, the whole data file is a single "package"
    Data = {package, [{name, "Erlang Application"},
                      {'line-rate', rate(Classes#result.line)},
                      {'branch-rate', rate(Classes#result.branches)},
                      {complexity, 0}],
            [{classes, Classes#result.data}]},
    Classes#result{data = Data}. % leave the metrics as is

% generate <classes> element, each Erlang module is "class"
generate_classes() ->
    % generate XML for every class, collect summary metric
    Fun = fun(Module, Result) ->
                  Class = generate_class(Module),
                  {Class#result.data, sum(Result, Class)}
          end,
    {Classes, Result} = lists:mapfoldl(Fun, #result{}, cover:imported_modules()),
    Result#result{data = Classes}.

generate_class(Module) ->
    Fun = fun({{_Module, Line}, Value}, Result) ->
                  Covered = case Value of 0 -> 0; _Other -> 1 end,
                  LineCoverage = sum(Result#result.line, {Covered, 1}),
                  Data = {line, [{number, Line},
                                 {hits, Value}],
                          []},
                  {Data, Result#result{line = LineCoverage}}
          end,
    {ok, Lines} = cover:analyse(Module, calls, line),
    {LinesData, Result} = lists:mapfoldl(Fun, #result{}, Lines),

    % [{Line,{Cov,NotCov}}]
    Data = {class, [{name, Module},
                    {filename, lookup_source(Module)},
                    {'line-rate', rate(Result#result.line)},
                    {'branch-rate', rate(Result#result.branches)},
                    {complexity, 0}],
            [{methods, []},
             {lines, LinesData}]},
    #result{data = Data}.

write_output(Report, Output) ->
    io:format("Writing output report '~s'...~n", [Output]),
    case file:open(Output, [write, {encoding, utf8}]) of
        {ok, Fd} ->
            ok = file:write(Fd, [Report, "\n"]),
            file:close(Fd);
        {error, Reason} ->
            io:format("Could not open '~s' due to ~p.~n", [Output, Reason]),
            halt(1)
    end,
    ok.

% sum metrics
sum(#result{line = {LineCovered1, LineValid1}, branches = {BranchesCovered1, BranchesValid1}},
    #result{line = {LineCovered2, LineValid2}, branches = {BranchesCovered2, BranchesValid2}}) ->
    #result{line = {LineCovered1 + LineCovered2, LineValid1 + LineValid2},
            branches = {BranchesCovered1 + BranchesCovered2, BranchesValid1 + BranchesValid2}};
sum({Covered1, Valid1}, {Covered2, Valid2}) ->
    {Covered1 + Covered2, Valid1 + Valid2}.

rate({_Covered, 0}) -> "0.0";
rate({Covered, Valid}) -> [Res] = io_lib:format("~f", [Covered / Valid]), Res.

% lookup source in source directory
lookup_source(Module) ->
    Sources = get(src),
    Glob = "^" ++ atom_to_list(Module) ++ "\.erl\$",
    Fun = fun (Name, _In) ->
                   % substract directory
                   case lists:prefix(Sources, Name) of
                       true -> lists:nthtail(length(Sources), Name);
                       false -> Name
                   end
          end,
    Name = filelib:fold_files(Sources, Glob, true, Fun, ""),
    case Name of
        [$/ | Relative] -> Relative;
        _Other -> Name
    end.

% Parse arguments into tuple list
scan_args([]) -> ok;
scan_args([[$- | Name] | Args]) ->
    NameAtom = list_to_atom(Name),
    {Value, Args2} =
        case has_arg(NameAtom) of
            true when length(Args) > 0 ->
                {hd(Args), tl(Args)};
            true -> usage(), halt(1);
            false -> {true, Args}
        end,
    put(NameAtom, Value),
    scan_args(Args2);
scan_args(_Args) ->
    usage(),
    halt(1).

has_arg(cover) -> true;
has_arg(output) -> true;
has_arg(src) -> true;
has_arg(_Other) -> false.
